오늘은 MVC가 뭔지, 그리고 정적 컨텐츠랑 API와의 차이점
애너테이션 기능에 대해서 조금씩 알아 가는 것 같다
@getMapping @Test @ResponseBody
그리고, 람다랑 리스트 다루는 법을 찾아보면서 공부했다
문자열에 null 값이 존재할 수 있으면
return 문자열; 이게 아니라 Optional 키워드를 많이 사용하신다고 하신다
그 밖에 오늘 강사님이 치신 키워드 목록을 쳐서 공부해봤는데 현업에서는 다중 스레드를 생각해봐서 짠다는 걸 많이 느꼈다
아래는 그러면서 주석많이 달면서 이해하고 간 것중 하나이다..
 //findFirst()는 항상 filter() 조건에 해당하는
  // 요소의 첫번 째 값을 항상 반환하는데, 멀티스레드에서도 내부적으로 먼저처리되는게 있어도
        //0 1 2 3 4 이런식으로 처리되면 항상 첫번째 코드만 반환하기 떄문에 그떄는 findAny()를 사용
        //findAny()는 항상 스레드 환경에서 조건에 해당되는 것 중 가장 먼저 filter를 적용한
        //첫번째 요소를 반환
        //member -> member.getName()은 그냥 for(Member members:member) 이렇게 해서
        //if(members==name) 이거 생각 findAny는 그 비교에서 가장 먼저처리된 결과문이고
이런식으로 하나하나 다 적은 주석을 보여주면 경험이 아니라 단순나열이기 때문에 적지는 않겠다..
익숙치 않은 코드들을 보고 이해만 하면 익숙하게 짤 수는 있지만, 거기까지의 과정을 이해하는게 너무 힘든 작업인 것 같다..
assert(java는 assertion)에 관해서도 c++은 assert만 하면 되는데 junit도 간접적으로 짜는데, 그 과정자체가 내가 알고 있던언어들과는
다르게 프레임워크 수업이니까 구조 자체가 이해가 안된게 한목하지 않았나 싶다..
이해하고, 영상이랑 메모랑 코드를 보면 한눈에 이해할 수 있을 정도로 스프링 입문 강의를 듣고, 강의를 다 사야겠다는 생각을 하였다..
만약 다 못 들으면 아직 나에겐 실력이 부족하니 나중에 보겠다고 생각을 하는게 맞는 것 같다
다 들으면 좋지만 어려운걸 굳이 배우면 비효율적이라고 생각하기 때문이다..
지금은 이해만 하고 있지만, 이해과정이 어려우면 이해한 것을 코드로 구현하는 과정까지 하기엔 너무이르기 떄문에
좀 더 쉬운걸 보겠다는 말이다..
스프링 공부하는데 쉬운듯 빡세다..
대충 흘겨서 이런 내용이다 라기엔 강사님의 말 중 현업과정에서 어떻게 다루는지에 관한 내용이 많고, 대충 자바공부하고 말았던 내가
현업 코드에 대해 직관적으로 한눈에 보고 알아차릴 실력도 그 강의를 듣는 목적 중 하나라고 생각하기 때문이다.
그래서 그런지 요즘 하루 하루 스프링 공부할 때 너무 어지러운 것 같다
세팅+ 코드 따라치고+말 이해하고 + 코드 이해하고 +뭔 말인지 풀어서 메모하고
한번에 다 할려고 하니까 좀 심하긴 하다..
한달 걸릴 분량은 아닌데 일주일은 잡아먹을 것 같긴하다.. 음..
빨리 공부하고 다음 꺼 넘어가야겠다..
스프링부트까지 다 하면 이번에 산 effective java 공부하려고 했는데 걱정이 많다
그거 다 하면 알고리즘도 할 생각이다
그리고 오늘 제일 좋았던건 생활 코딩의 수업이랑 스프링이랑 연계가 되었다
?id=3423 이런식으로 input type에 form의 submit으로 넘겨주고 get,post 방식 이런게 있는데
이번에 하는 스프링은 get-mapping으로 ?id=334e2 이런식으로 서버가 동적으로 들어오면 거기에 맞춰 패러미터를 이용해서 잡아 넘길 수도 있는데
이걸로 버튼을 누르면 바탕화면에 hello +{id} 이런식으로 바꿀 수가 있도록 가능하겠다는 생각이 들기 떄문이다.
그리고, spring에서 API 템플릿 엔진을 이용해서 java의 if문으로 사용자의 관리자 엔진이랑 운영자의 관리자 엔진조차도 권한이 다르게 짜보는 것도
가능할 것 같다는 생각이 들었다
즉 1유형, 2유형 , 3유형, 4유형 ,5유형
이렇게 각각의 곳에서 ?id=6342 이렇게 치면 switch문으로 비교해서 1유형의 권한 ?id=7749 2유형, 이런식으로 말이다
ui만 조금씩 수정해서 추가하고, x창을 누르면 js로 게시판글이 자동으로 지워지게끔 그리고, 링크만 뒤에 ?id=6342 이런식으로
이렇게 권한을 주면 운영자가 코딩을 몰라도 할 수 있다.
실제로 서버에서는 이런 보안적인 요소를 어떻게 다루는지는 모르겠지만, 나중에 공부해봐야겠다는 생각을 얻었다
보안적인 기능은 구현하는 과정은 어떨지 몰라도 표면적인 부분에서 보아는 것은 대단하다
일례로 내가 본 블로그중에는 ui를 바꾸려고 하면 전체화면이 다 지워지도록 보안을 짜는 경우가 있다
내 생각엔 기존 블로그라는 객체를 잡고 전체와 다르다면 전부지우거나 하는 느낌으로 짠 것 같기도 한데 좀 더 공부해봐야되겠다



