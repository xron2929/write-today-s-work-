try catch, throw,assertThat,if,throws

예외의 경우 if문을 사용할 수도 있는데 사용하지 않는 이유는?
예외라는 명시적인 용도가 있어서 예외라는 명시적인 용도가 있는 것들은 사용한다
 try-catch는?
 try
 {
  실행
 }
 catch(Exception e) // Exception은 예외로 런타임에러, 0나누는 에러 등등 여러 에러타입이 존재하는데, 0나누는 에러에 대해서만 처리를 하고싶으면 ArithmeticException e이런 느낌
 {
    에러가 떳을 때 실행할 것
 }
 finally
 {
    에러가 뜨던 뜨지 않던 꼭 실행할 것
 }
 (finally는 쓰지 않아도 됨)

assertThat은?
 assertThat(기대한값).isEqualTo(결과);
 예를 들어, A라는 변수에 3이라는 값을 기대했다면?
 assertThat(3).isEqualTo(A);
 이런느낌..(물론 이렇게 간단하게 짜는 경우는 거의 없을듯..)
 junit, 즉 테스트 코드를 작성할 때 사용한다.(테스트 코드란? 코드가 잘 실행되는지 하나하나 실험하면 불편하기 때문에, 따로 만들어서 값이 잘 들어가는지 테스트 하기 위한 용도로 만들어진 코드)
 
 throw는?
 요런 느낌의 코드인데, 이걸 사용하는 이유는?
 예외에도 어떤 용도로 사용하느냐에 종류가 있다
 1. 코드를 실행하는 과정에서 에러가발생해서 예외를 처리해야될 때
 2. 아직은 잘 모르는데, 트래픽이 너무 많이 오거나 할때, 에러가 다 뜨는데, 일부 코드는 그런 환경에서도 에러가 떠도 우선적으로 작동시켜야할떄(즉, finally를 사용해야할때)
 3. 의도적으로 예외를 발생시켜야할떄(즉 어떤 조건이 발생하면 예외가 뜨도록 해야할떄)
 4. 코드 자체에서 예외를 잡는 것을 필요로 할 때
 3번에 해당하는 예외에 대해서 try-catch를 줄일 수 있다.
 어떠한 조건문에 대상이 들어왔을 때 
 명시적인 용도인 try-catch를 추가해서 사용하면 엄청나게 길어진다..
 try
 {
    int i=2;
    if(i<3)
    {
      throw new Exception("고의로 발생");
    }
 }
 catch(Exception e)
 {
    System.out.println("??");
 }
 이런 느낌이다.
 근데, 여기서 try-catch를 쓸 필요가 있을까?
 if(i<3)
 {
    throw new Exception("고의로 발생");
 }
 
 finally가 필요한 경우라면 try-catch를 써야한다.
 if문 비교+naming가 잘 되었을 경우, 예외가 발생했다는 내용을 전달하기에는 위의 경우도 충분하다
 즉, 내가 하고싶은 말은 의도적으로 예외를 발생시켜야할 떄, 나중에 finally(에러가 떠도 꼭 코드를 실행해야 하는 경우)를 가능성이 있거나, 지금 당장 finally가 필요한 경우라면 try-catch아니면
 이렇게 조건절+throw를 사용하는 편이 적절하다.
 
 throws는?
 자기 에러 뜨는 거 남한테 책임을 넘겨주는 용도
 생성자에서 문제가 아니라 호출자에서 잘못 꺼내다 썼으면 생성자를 고칠위험이 있으니 이걸 호출자를 넘겨서 호출자가 고치도록 하거나, 
 의도적으로 코드를 짤 때 생성자 대신 호출하는 부분에서 나누면 좀 더 코드단이 구분이 잘되어 읽기 좋다는 장점이 있고, 확장성 및 컴파일용도로도 좋다
예를 들어 문자열을 숫자로바꿔서 나누는 함수가 있다면
 class 
 {
    throws 나누기함수 throws Exception e
 }
 생성자의 나누기 함수를 호출하는 함수(String 인자,String 인자)
 {
    try
    {
      문자열-> 숫자로 바꾸는 함수
      그 숫자들을 나누는 함수
    }
    catch(ArithmeticException e)  // 0으로 나누었을 떄 뜨는 예외
    {
    
    }
    catch(NumberFormatException	e)  // 숫자로 바꿀수 없는 문자열을 바꾸려고하였을 떄
    {
    
    }
    catch(Exception e)  // 위와는 다른 예외가 발생했을 때
    {
    
    }
 }

 생성자의 나누기 함수를 호출하는 함수를 이용하는 함수
 {
  생성자의 나누기 함수를 호출하는 함수(String 인자,String 인자)
 }
  물론 이걸 설계할 떄는 이런 것 까지 생각하면 너무 힘들것이다.. 
  그러나, 유지보수에는 필요하다고 생각한다..
  예를 들어 나누기를 실행하는 함수 A랑 나누기를 실행하는 함수를 호출하는 B,그리고 나누기를 실행하는 함수를 호출하는C,나누기를 실행하는 함수를 호출하는 D가 있다면
  유지보수할 떄는 나누기를 실행하는 함수A 에 try-catch를 올인해버리면 B호출에서 예외가 뜨길래 틀어막으려고 에러가 뜨던 부분인 A에 try-catch를 쓰다가 막상 고쳐보니
  C,D 이런 곳에서도 예외가 뜬다면?
  throws를 쓰지 않았더라면 C와 D뿐만 아니라 A함수나 B함수에도 쓸 대 없는 시간을 들여가며, 어디가 문제지 이러면서 아무 문제 없는 코드를 보고 시간낭비를 하고 있을 것이기 때문이다....
  + try-with-resources
  java7에 생긴 문법으로 close가 필요한 코드에는 null로 비교안해도 되도록 만들어진 코드이다.
  FileWriter f=null;
  try
  {
   f = new FileWriter(fileName:"data.txt");
   f.write(str:"Hello");
   catch(IOExeption e)
   {
    e.printStackTrace();
   }
   finally
   {
     if(f!=null)
     {
      try
      {
       f.close();
      }
      catch(IOException e)
      {
       e.printStackTrace();
      }
     }
   }
   close는 연결해서 까져오는 것이기 때문에 꼭 try-catch가 필요하다.
   아래는 close를 하지않아도 자동으로 된다
   
  try(FileWriter f=new FileWriter(filename:"data.txt")
  {
   f.write(str:"Hello");
  }
  catch(Exception e)
  {
   e.printStackTrace();
  }
  이걸 정리한 이유는 다른 사람 코드를 좀 더 직관적으로 한눈에 알아볼 수 있도록 맞춰가는 과정이고, 한번 쯤은 정리할 필요를 느꼈다.


 
 
 
 
