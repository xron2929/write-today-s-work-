연관관계 매핑은 본인이 구현하려고 하는 목적에 대해 구현하기 위한 것을 제작하는 것이고,
Embedded(or class내의 값)는 하나의 객체가 가진 값들을 하나하나 객체에 저장하면 어렵기 때문에, 이걸 하나의 class타입(DTO)으로 묶어서 쉽게 사용하기 위한 방법이다
그러니까, 예를 들어 하나의 회원이 휴대폰을 주문하기 위해 주문하는 걸 구현하는게 목적이라면
회원 - 주문 - 휴대폰 주문 -휴대폰(종류)의 관계가 연관관계로 매핑된다
반대로 휴대폰번호,가입 메일,주민번호와 계정이 다 새로 가입된 계정이라면 이벤트로 문화상품권/캐시 를 주고, 회원 가입이나 이벤트로 받은 것을 취소할 수도 있다면 
회원(Embbeded 사용자정보(휴대폰 번호,가입메일,주민번호,계정))로 설정하고, 나중에 꺼내올 때 Embadded 휴대폰 번호,가입메일,...로 꺼내와서 값이 같은지 확인하는게 맞는 것 같다 
(아직 공부가 덜 되서 잘 모르겠는데, 지금까지 고민해본 느낌으로는 이렇다)
그래서 연관관계는 
회원- 회원 가입 - 이벤트
여기서 휴대폰은 연관관계가 휴대폰을 구매하기 위한 서비스를 구현하는 logic이냐, 아니면 회원이 휴대폰을 가지고 있는 logic인지에 따라 달라질 수도 있다
또 연관관계 매핑할 떄 생각할 요건은 나중에 메소드를 만들거나, 취소할 조건 같은게 있다면 새로운 개념을 class로 만들어서 거기서 취소하거나 메소드로직으로 만들어야 하는지,
아니면 단순히 VO나 DTO타입(setter,getter)인지 생각하는 게 맞는 것 같다







