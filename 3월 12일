방문자패턴: 그냥 방문하는 대상과 행동을 기준으로 class로 나누는 것이라 따로 없는 것 같다
책임 사슬 패턴: 제한적인 class에서 다른 class로 넘기는 방법
그냥, 계산기 예제를 class로 만들고 여기서 예외가 발견하면 NullPointerException(문자열이 널일떄)->ArrayIndexOutOfBoundsException(배열범위 초과)-> ArithmeticException(0으로 나눴을 때 에러)
이런식으로  예외class를 따로 만든다면 이 경우 책임 사슬 패턴이다.
근데 기존 class-> 예외를 담당하는 class 여기서 의문인 게 조금 있었는데 pass하기로 했다.
이제 디자인패턴도 몇 개 안남은 것 같아서 좋긴 하다..
이거 다 끝나면 DDD강의로 먼 내용인지만 흐름 파악? 이라도 할 생각이다.(대충봤는데 딱 봐도 모르기 떄문에, 그냥 노가리 까듯 보기라도 해야겠다..)
이거 끝나면 이제 드림코딩엘리 보면서 클린 코딩 연습할 거 같은데, 대충 따라치면서 만들고, 습작하는 과정을 숙달해서 딱 보면 사고가 분리되도록 만들어서 짜야겠다는 생각이 들었다.
그거랑 노마드코더같은 무료 클린코드 따라치면서 연습해보고, 추가로 더 필요하다 싶으면 만들고, ui ux 구현 더 공부하고...
이 과정을 반복하면 대충 설계할 수 있지 않을까 생각한다..
익명함수 쪽은 함수 호출부를 보면 한 눈에 인터페이스를 어떻게 구현했을 지 대충 눈에 보일 정도로 해야되는데 그 정도는 아직 아닌 것 같다

오늘 일정은 이대로 끝내면 될 것 같다
나중엔 디자인->html+css+js->자바,스프링 이게 되야되는데 숙달이 오래걸릴 것 같다..
클라우드랑 aws 도커 리눅스서버연동(쉘 스크립트 작업) CI/CD 자동화 배포 cs 알고리즘 은 나중에 미루고, 지금은 이거 공부 좀 하다가
시간나면 해야겠다
느끼는 점은 가면 갈수록 내가 짰던 java 계산기 코드 개선안이 보이는 것 같은데 시간이 날 지 모르겠다(계속 바쁘다)
암튼 빨리 해야될 것 같다

옵저버 패턴: 그냥 다른 class가 쉽게 갖다 쓸 수 있도록 객체를 넘겨주는 건데 Observer 패턴인 이유는 Observer랑 Observable때문에 나오는 것 같긴한데,
자바에서 추천하지 않기 때문에 그냥 직접 구현해써야겠다는 생각을 한 것 같다..
사실 디자인 패턴 강의인데 디자인 패턴이 안 나오고, 코드 위주로 보여줘서 볼때마다 이 디자인 패턴이 그래서 먼데... 라는 생각과 왜 디자인패턴을 보러왔는데, 잘 몰랐던 문법을 공부하지.. 같은 생각도 하는 것 같기도 하다
오늘부터는 좀 디자인 패턴 빨리 빼기로 해서 빨리 
