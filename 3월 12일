

옵저버 패턴: 그냥 다른 class가 쉽게 갖다 쓸 수 있도록 객체를 넘겨주는 건데 Observer 패턴인 이유는 Observer랑 Observable때문에 나오는 것 같긴한데, 
자바에서 추천하지 않기 때문에 그냥 직접 구현해써야겠다는 생각을 한 것 같다..
사실 디자인 패턴 강의인데 디자인 패턴이 안 나오고, 코드 위주로 보여줘서 볼때마다 이 디자인 패턴이 그래서 먼데... 라는 생각과 왜 디자인패턴을 보러왔는데, 잘 몰랐던 문법을 공부하지.. 같은 생각도 하는 것 같기도 하다
오늘부터는 좀 디자인 패턴 빨리 빼기로 해서 빨리 빨리 해야겠다...
아래 패턴 두개 보면서 한 파일 내에서 작업하는 것 뿐만 아니라 다중 패키지에서 처리하는 방법도 조금씩 익혀가는 것 같다.. 
abstract class(추상 class)or interface의 메소드는 항상 public 형태의 부모 class가 아니라면 다른 class에서 참조 할 수 X
그래서 public 으로 잡으면 되는듯

파사드 패턴: 중간에 복잡한 과정을 간단하게 호출만 하면 되도록 짜는 패턴 방식
중재자 패턴: 옵저버 패턴과 비슷하게 Mediaator 1개에서 다 받고, 다 제공 하는데, 호출할 때 간의 관계는 mediator를 통해서만 상호 연결이 가능함
옵저버 패턴과의 차이점은 옵저버 패턴은 항상 다 대 1관계가 되는 상태 이벤트 하나의 class를 여러개가 갖다 쓰거나 하는 관계라면 중재자는 좀 더.. 유기적인 관계(그러니까, 서로가 서로에게 값을 바꾸거나
이용하거나 할 수 있는? 그런 관계임(단 Mediaator 중재자를 이용해야만 하는 패턴이므로 사용할 땐 Mediator(중재가)의 값이 바뀌고 이걸 함수가 호출하거나 하는식으로 짜는듯)
파사드랑 중재자의 차이는 파사드는 여러개의 생성된 class를 하나의 호출자로 간단하게 요런 느낌인듯..
즉, 생성받는게 많고, 호출이 한 가닥이면 옵저버 반대면 파사드 애매한 상태의 관계면 중재자 이렇게 생각하면 구분이 되는 것 같다..(블로그 여러 곳 뒤져봤는데 애매해서 당분간은 이렇게 생각하는게 맞는 것 같다..)

