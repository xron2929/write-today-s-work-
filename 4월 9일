한 값에 대한 양방향 매핑시에는 
예를 들어 team_id가 fk인 Member와 team_id가 pk인 Team이 있다면
team을 설정하고, member에서 team 테이블을 등록하면, 그 값은 내부적으로 EntityContext에서 관리하고 그 중 Member_id Team_id Member_name에 대해서만 db가 관리하도록 보낸다
여기가 다:1 연관관계의 단방향인 상태이다.
이 경우에 대해서는 하나 하나의 회원에 대해서 어떠한 팀에 속했는지에 대해서 알 수 있다
반면, 자신이 속한 팀에 누가 있는지를 얻으려고 하면
반대편인 팀에도 "자신이 속한 팀의 회원"을 얻으려고 하면 직접 추가해주어야 한다.
아직은 잘 모르겠지만, em.createQuery()로 직접 모든 회원을 db에서 조회해서, 그 중 같은 팀 id를 가지고 있는 회원들만 한꺼번에 하는것도 방법일 것이다
(이 경우, 위 처럼 자신이 속한 팀의 회원을 직접 등록안해줘도 되기 때문에 유지보수면에서 관리하기 편하지만, 생각해보면 db에 있는 모든 회원을 뒤져야되기 떄문에,
11번가,g마켓,쿠팡... 같은 대형 쇼핑몰의 경우에는 예를 들어 해당 물품들을 올린 곳이랑 거기서 그걸 판매하는 회사가 있다면 이 회사는 식품뿐만 아니라 다른 것도 관리할 가능성이 있다면
다른 제품류도 다 열어놓아야 하는데, 이걸 db에서 조회한다면 모든 제품에 대해서 다 db로 조회해야  하니 비효율적일 것이다.
동시에, 이렇게 자동으로 처리가 되면, 까먹고 해당 쇼핑몰에 판매하는 책을 추가하는 코드를 빼먹었다면 다른건 다 조회가 되는데, 해당 물품을 올리는 곳들이나 책을 올리는 곳들에 대해서만 책이 등록이
안 되는 에러가 발생하고, 이것 때문에 db처리 부분이 에러가 났는지, 연결을 할 때 잘못을 연결한건지, 등등 여러 코드를 뒤져야 하는 불상사를 막을 수 있을 것이다)

