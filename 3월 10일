오늘 나무위키에서 it 관련 얘기를 봤는데 잘못 알려준 것 같아서 오늘 해결하긴했다..
그리고, 빌더 패턴,브릿지 패턴,어뎁터 패턴이 잘 기억안나서 대충 공부했다
어뎁터 패턴: 인터페이스랑 class가 있다면 인터페이스는 기능. class는 구현. 에 취중되어있는 상태이다.
이떄, 어떤 상품을 판매한다면, 상품(기능)이 되는것은 인터페이스, 어떤 상품인지는 구현이 된다.
여기서, 하나의 물품을 여러 번 어떠한 조건에 따라 판매한다면? adapter pattern을 이용해서, 이 과정을 여러번 하는 class를 만들어주면 된다(작은 거면 메소드로 횟수를 잡고 구조를 짜도 되겠지만, 특수한 조건이나
고려해야 될 사안이 너무 많으면 class.)
여기서, 어제까지는 이런 기술이 있구나 정도를 아는 걸 목표로 했지만, 나중애는 디자인패턴에 맞는 네이밍을 짜야될 지, 아니면 기능에 맞는 네이밍을 하는게 맞는지 의문이 들었다..
예를들어, 만약 아주 값비싼 명품을 판매할 수 있는데, 지금은 커피만 만들고 판매하지만, 나중에 다른 물품도 판매할 수 있다는 조건이면 기본 설계를 할 때는
interface 물품 판매 {  
  구매하는 물품 갯수의 변수
  private 물품 만들 수 있는 갯수를 불러오는 함수();
}

class 커피 판매 implements 물품 판매 {
  커피를 타기 위한 조건class의 객체
  private 커피를 만들 수 있는 갯수를 불러오는 함수();
  구매하는 커피 갯수의 변수
  생성자(구매하는 커피 갯수) {
    this로 참조
  }
  커피 판매하는 함수()
  {
    if(구매하는 커피 갯수> 커피를 
  }
}
class 커피를 타기 위한 조건 {
  커피 재료 변수(커피말고, 홍차나 라뗴류도 판매할 가능성이 있다면, 이 재료도 다른 class에 두기)
  private 커피 끓이기에 알맞는 온도 확인 여부();
  private 직접 생성한 우유존재();
  private 시럽 여부();
  private 직접 생성한 커피콩 존재();
  private 휘핑크림 존재();
  커피 만들 수 있는 갯수();(여기서 위의 조건에 맞게 짜면 됨. 위 조건을 이 함수에서 다 처리하게 해준 감이 있긴 한데,
  생성단위 말고 호출 단위로 함수를 불러오는 방법보단 낫고, 커피 만들 수 있는 갯수()를 class단위로 더 구분해서 커피를 타기 위한 조건에 분리시켜서 거기서 위 class를 불러오게 해도 되기는 하지만,
  좋은 방법같지는 않았기 때문에 여기서 작업함)
}
요런느낌으로 설계를 할 것이다.
그런데, 만약 이미 코딩되어있는 구조에서 설계를 해야한다면 디자인패턴이름으로 할 지, 기능에 맞는 이름으로 할 지 모르겠다..(전자는 간단한 기술에 불과하고, 디자인패턴을 위한 용도가 아니면 후자가 맞는 거 같긴하다..)
예를 들어
interface 물품 판매 {

}
class 커피 판매 implements 물품 판매 {

}
여기서, 커피판매 class를 여러개 판매하고 싶다면, 2가지가 있는데 후자에 
1번 setter나 생성자를 이용해 따로 커피 판매갯수를 늘릴 수 있는 메소드를 만든다
2번 커피를 여러 조건에 따라 판매하는 class를 만든다(예를 들어, 커피라이터, 커피를 타는 복장,자세 이렇게 2개씩 각각 있고 이게 절대 안바뀐다면, 커피를 타는 사람 interface로 잡고 class로 잡으면서
확장할 필요가 없다.. 같은 조건)
그럼 여기서 드는 의문은 네이밍할 떄
class 커피판매adapter {

}
랑
class 커피판매조건 {

}
이것 중 머가 낫냐는 것이다..
내 생각엔 후자를 차용하고, 디자인패턴 기능을 강조(할 일이 있는지 잘 모르겠지만...)할 일이 있다면, 전자를 쓰는게 맞지않을까 싶은 의문이 들었던 것 같다.

