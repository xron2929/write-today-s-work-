DAO: db에 접근하기 위한 객체
DTO: getter,setter를 가진 객체의 데이터교환을 읽기위해 만들어짐
VO:  stter가 없는(수정자가 없는) 객체로 단순히 읽기 용도를 위해 만들어짐
VO 환경은 setter가 없으므로, Construct(생성자)를 통한 객체 생성이 유리
반면 DTO 환경은 수정이 필요한 데이터 교환을 필요로 하는 상황에서 짜는 방법이기 떄문에, vo로 하기 힘든 작업일 경우 하면 좋음

새로운 class를 두어야 할 때
1. 확장성이 존재할 떄, 하나의 기능에서 다양한 방법으로 구현해야 될 경우
2. 하나의 class가 담당하는 기능이 많아질 때(단, 이 기능은 코드를 짤 때보다 설계를 할 때 작업하는 것이 더 좋음
2-1. 생성자의 객체 생성(일반적인 new를 이용한 방식보다는 스프링이면 싱글톤으로 자동 처리되고, 일반 java면 플라이웨이트 패턴을 이용하는 것이 좋음)
질문:
public MemberService(MemberRepository memberRepository) {
  this.memberRepository=memberRepository;
}
와 같이 선언하고,
public static void main(String[] args) {
  MemberService memberService1=new MemberService();
  MemberService memberService2=new MemberService(memberService1);
}
이렇게 잡으면?
 물론, 이렇게 잡는 것이 더 좋을 수 있음
 실제로 AnnotationConfigApplicationContext를 통한 생성자 주입도 이런식으로 주입을 받게 되어있음
 예를 들어 MemberService,MemberRepsoitory,Orderservice,OrderRepository,Delievery,DelieveryService,..를 한번에 다 주입받아서 테스트를 해야되는 경우에는
 처리를 할 때 MemberService memberService=new MemberService(memberRepository);를 이용해서 하나 하나 만들어 주고 주입 시켜주면 코드가 너무 많아짐
 따라서, 플라이웨이트로 짠 후에 주입은 생성자나 빌더패턴으로 한번에 주입 받는 식을 만들고 그 환경내에서 service랑 repository 같은 여러 객체에 아무값이나 넣어서
 서로가 서로의 객체 타입이 연결이 잘 되는지 고려해볼 수 있음
 스프링에서는 @Transactional로 지원해줘서 
 필요하다면 테스트 파일에 고려해볼 수 있을 것 같으나, 위의 경우도 테스트 설계를 잘했다면
 orderService->orderRepository, orderRepository->order, order->orderItem 이런식으로 각각의 작은 단위의 테스트에서 잘 잡았을것 같긴함
2-2. 하나의 값에 들어오는게 많을 때 (DTO 생성)
안에 들어올 값이 객체가 아니라 하나의 class에 여러개의 타입이 있는데 이중 일부만 가져다 쓸 것이라면
그 부분만 따로 묶어서 DTO로 짜는 것이 더 효과적임
2-3. 여러개의 클래스가 중복된 내용을 담당할 때
이 경우 하나의 중복된 내용(음식을 "사는데" 여러개의 음식이 있다면 각 음식이 "buy"라는 메소드가 각 class에 포함될 때)
을 묶어주는 것이 나을 수도 있음
다만, 일반적인 경우는 각 class에 buy메소드를 추가해주는 것이 나을 상황일 수도 있음
(buy라는 구매에 대한 class를 만들면, 음식을 사 먹을 수 있다는 것과 관련해 만든 것인데,
산다와 먹는다에 의미를 줘버리면 음식이라는 의미가 상대적으로 퇴색되어 받아질 위험이 존재)
따라서 기존 class(음식)에 이미 너무 메소드가 많다면 상황에 따라 그 부분만 class로 묶고
comment로 남기는 방법도 있음.




 
 
 
 
 
