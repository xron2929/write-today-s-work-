현재 해시+연결리스트의 경우는 동적인 환경은 key랑 value가 같다면 해당 키를 조회할 때 O(1)을 보장한다
(정적인 경우는 해당 key에 맞춰 조회하면 되므로)
근데 이렇게 하면 발생할 수 있는 문제가 중간 연결리스트를 삭제할 떄는 O(1)을 보장하지 않는다 즉 O(N)이다
그래서, 오늘 자바에 있는 해시 연결리스트를 해보려고 했는데,
java에서 불가능하고 c언어에서만 중간 탐색을 단축+중간 연결리스트를 방문해서 시간 낭비를 방지하는 방법만 발견했다..
(단 메모리가 그만큼 낭비된다)
(방금 생각한 방법인데 나중에 자료구조 공부할 때 제대로 짜봐야겠다)
동적 연결리스트를 만들 때 전역으로 두고,
add() 함수로 head에서 nextptr를 추가하고 반환 형을 해당 노드로 리턴한 다음에
밖에서 *pos=*nextptr로 해당 노드가 가리키는 위치만 nextptr만 받은걸 보관해서, free(nextptr);로 해제하면
나중에 remove(pos); 를 이용하면 pos->prev->next=pos->next; pos->next->prev=pos->prev; 이런식으로 O(1)시간 탐색이 가능하다
이렇게 하면 동적배열을 전역으로 사용해서 메모리 낭비가 조금 있지만, 연결리스트가 엄청나게 많은 구조라면 이 쪽이 더 효과적으로 짤 수 있을 것 같은데,
c언어를 안한지 조금 되어서 오랜만에 하니까 잘 작동하는지 모르겠다. 
나중에 해봐야겠다
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

class Yreg{
	public int t;
	public String x;
	@Override
	public int hashCode() {
		return Objects.hash(t, x);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;	// 자기 자신의 주소 이면 
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Y other = (Y) obj;
		return t == other.t && Objects.equals(x, other.x);
	}
}

class Zger{
	public int t;
	public String x;
}

class FELM{
	public String data;
	public String name;
	public int grade;
}


public class FSE {
	public static void main(String[] args) {
		Map<Yreg, FELM> fruits = new HashMap<>();
		Yreg yreg=new Yreg();
		FELM flem=new FELM();
		FELM flem2=new FELM();
		FELM flem3=new FELM();
		flem.data="few";
		flem.name="rger";
		flem.grade=1;
		flem2.grade=4;
		flem2.name="egre";
		flem2.data="GREG";
		flem3.data="bregg";
		flem3.name="hettreh";
		flem3.grade=2;
		yreg.t=3;
		yreg.x="Common";
		Yreg yreg2=new Yreg();
		yreg2.t=3;
		yreg2.x="Unique";
		Yreg yreg3=new Yreg();
		yreg3.t=3;
		yreg3.x="Only";
		fruits.put(yreg,flem);
		fruits.put(yreg2, flem2);
		fruits.put(yreg3, flem3);
		Yreg yreg4=new Yreg();
		yreg4.t=3;
		yreg4.x="Unique";
		FELM flem5=fruits.get(yreg2);
		// FELM flem5=fruits.get(yreg4);
		
		System.out.println(flem5.data);
		System.out.println(flem5.name);
		System.out.println(flem5.grade);
		
		
	}
}
그리고 key랑 value는 이런식으로 객체로 잡아도 당연하지만 잘 돌아가는데,
.equals()로 key값을 분류한다고 해서 .equals()가 default고 오버라이딩되어있는 상태면
해당 객체와 동일한 값만 입력해도, fruits.get(yret4)처럼 탐색이 될 것 같았는데, 실제로 해보니까 이렇게 오버라이딩해도
잘 작동하지 않았던 걸 확인했다...
자바 8에서 default를 지원해주니까 안해주는 것 같기도 하다.





