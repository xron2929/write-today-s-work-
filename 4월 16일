
Scanner BufferedReader
Scanner는 1KB(1000비트), BufferedReader는 8kb(8000비트)의 크기를 가지기 떄문에 
각각 1000글자, 8000글자씩 받을 수 있다

BufferedInputStream, fileInputStream의 경우
어제 질문글 올라와서 대충 읽어서 문제가 일어났는데, 코드는 이런 코드였다

코드 

StopWatch stopWatch = new StopWatch();

//실제론 왜 이게 더 빠름?

try {

	stopWatch.start();
	int bufferSize = 100;
	byte[] buffer = new byte[bufferSize];
	String filename1 = "//Users/admin/Downloads/untitled1/aefew/fewnkf.txt";
    FileInputStream fileInputStream = new FileInputStream(new File(filename1));
    
while (fileInputStream.read(buffer) != -1) {
	
}
// 1.미리 선언할 떄 최적화함
// 2. 그게 아니라 값대입해서 출력하는게 아니라서 단순히 읽고끝냈을 가능
fileInputStream.close();
stopWatch.stop();
System.out.println(stopWatch);
} catch(IOException e) {}
	

// 이게 더 빠르다며
try {
stopWatch.start();
int bufferSize = 100;

String filename3 = "/Users/admin/Downloads/untitled1/aefew/waenkj.txt";
BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(new File(filename3)), bufferSize);


while (bufferedInputStream.read() != -1);
bufferedInputStream.close();

stopWatch.stop();
System.out.println(stopWatch);
} catch (IOException e) {}

}
}

class StopWatch {
private long start;
private long end;

public void start() {
start = System.currentTimeMillis();
}

public void stop() {
end = System.currentTimeMillis();
}

public long getTime() {
return end - start;
}

public String toString() {
return String.valueOf(getTime());
}
}

글쓴이가
작은 글자 크기여도, fileInputStream이 더 빠르다고 하길래
오늘 맞춰보니까 해당 코드는 당연히 fileInputStream이 빠를 수 밖에 없다
일단 해당 코드의 첫번 째 문제는
BufferedInputStream bufferedInputStream = new BufferedInputStream(fls);
이렇게 안받고
BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(new File(filename3)), bufferSize);
이렇게 받아서
(while (fileInputStream.read() != -1); 이렇게 안하고 while (fileInputStream.read(buffer) != -1); 이렇게 해서)
위의 코드는 파일리더가 한글자씩 읽어서 그걸 바로 버퍼로 보내는 반면,
아래 코드는 파일 리더 -> 버퍼로 보내는 과정에서 1000글자가 있다면 100글자씩 나눠서 보내니까 당연히 1kb이하의 버퍼의 가능성을 시험하는 예제에서도 연산처리에 손해가 일어날 수 밖에 없다
더 쉽게 말하면 위처럼 작성할 경우 버퍼를 쓸 이유가 없다
오히려 버퍼에서 리더로 받은 값을 형변환하거나 중간 연산 과정에서 시간손해가 나타날 가능성이 더 크다(즉 해당 코드의 버퍼는 100글자 받고 보내고, filereader의 버퍼도 100글자 받고 보낸다)
(즉 일반적인 연산은 스캐너가 버퍼보다 "항상" 빠르다 
그런데, 왜 버퍼를 쓰라고 하냐면 스캐너는 자신의 버퍼크기가 가득차면 바로 보내주기 떄문에 이걸 버퍼에서 쌓으면 여러번 보내주는 것보다 한번 보내주는 것이 더 빠른 방법이다
즉 저렇게 범위를 정해주고 짰을 때가 아니라 위의 코드처럼 받을 경우 버퍼 크기가 InputStream보다 효과적이다
(1000글자 정도 뒀는데 버퍼가 느린 걸 보니 자바는 char이 2비트라 1000*4=4000 비트이기 때문에 c언어/c++같은 표준 io(cin,scanf)를 이용했다면 4번 버퍼비우기를 진행했기 때문에 버퍼보다
느릴 것이다. 왜 자바가 2비트냐면 java는 유니코드를 지원하기 때문이다 그리고 어제 말했듯 각각 승계작업이 일어난다
그리고, 단순히 안에 범위를 지정해주지 않으면 1비트씩 계산한다 ) 
(어쨌든 간에, 500글자안에서는 여러번 동작시켜도 비슷한 결과가 나타났다. 즉 500*2=1000 비트)
만약 저기서 바이트 코드를 늘린다면 능동적으로 늘려주는 지는 native로 되어있어 알기 힘들어서 아래와 같이 직접 시도 해봤는데 
확인해보니까 fileReader가 안에 buffer가 있다면 어제처럼 크기를 지정해준 만큼 버퍼크기가 커져서 효과적이다
(어제 책 자료 말 대료면 대략 int는 4byte char은 8byte 기준으로 해주긴 할껀데, (실제로 IntegerPattern이랑 다 나눠져있어서 그런 것 같기도하다..)
빨리 계산하기 위해 그냥 한 글자 입력당 4 byte씩 잡고 어제처럼 입력 글자수를 계산해서 2048 그러니까, 512글자에 대한 입력이 넘어간다면
무조건 저런식으로 스캐너에서 buffer를 안에 적어두는 것이 더 효과적이라고 할 수 있다.




