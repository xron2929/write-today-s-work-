tymleaf 정리(3.28~3.29)
MVC 패턴은 Servlet API로 구현되어있는데,
Servlet API는  동적 API, 쿼리문(db),매핑 이런걸 처리하는 것(시간이 지나면서 servlet은 mvc처리같은 거만 하게됨)
OGNL이 bject-Graph Navigation Language가 이름 값만 보고도 자동으로 내용이랑 연결을 해주는 처리를 함

th:text는 텍스트 중간에 있는 태그를 무시하기 때문에
th:utext를 써야됨
그리고, th:text랑 th:utext에서 단순히 문자열이랑 같이 더하는게 아니라, 값만 동적으로 가져오는 경우는
<!--<p th:text="#{content.id}" th:attr=''></p>-->
이게 아니라
<th:block data-th-text="#{content.id}"/>
요런식으로 써야됨
#{context.id} 이런 형식은 properties를 만들어서 값을 주입하는 느낌이라 사실상 정적인 느낌임..
<th:block data-th-text="${value2}"/>
$는 model에서 매핑한 값을 동적으로 받을 수 있는데
${model.id}이렇게 받으려고 시도했는데 계속 값이 주입이 안되서 어려웠는데,
controller에서 매핑할 때
model.addAttribute("o",O.class); 이게 아니라
model.addAttribute("o", new O()); 이런식으로 주입해야됨
model.addAttribute()를 여러번 사용하는 것도 가능
그리고, 자체 태그를 넣을 떄, th:text랑 text가 있으면
정적으로 파일만 불러올 떈 text 태그가 사용되고, 동적으로 올 떄는 th:text가 사용됨
"${'valueee4'}" 이렇게 해도 안에 정적으로 주입하는 것처럼 되는 느낌임
${a.b.c}; 랑 *{a.b.c}랑 둘다 object타입이 따로 없다면 동일하게 사용가능
반면 th:object=${a.b}라면 a.b.c를 참조할 떄 *{c}로 접근하거나,  ${a.b.c}, ${#object.c}로 접근해야되서
*랑 #은 다른 느낌임
링크로 보낼 때는 이렇게 보내면 되는데
<a href="details.html" th:href="@{/order/details/{orderId}(orderId=${o.id})}">view</a>
타임리프에서 /3이오는거랑 /orderId=3이 오는 거랑 어떻게 구분해서 처리를 하는 지 안 알려줘서 위와 같이 구현함 ()로 뒤에 따로 구현하고 앞에서 {orderId}이런식으로 접근하면 됨
반대로 ?orderId=3 을 하는 방법은 타임리프에 정리되어있으니 생략함
그 외에 url 표현에 대해 찾다가 https://catsbi.oopy.io/32a9458e-f452-4733-b87c-caba75f98e2d 이걸보고 &랑 ? 의문자를 보고 의문이 들어서 아래와 같이 코드를 각각 실행해서 확인해봄
    <a href="details.html" th:href="@{/order/details/{orderId}(orderId=#{o.id})}">view</a>
<!-- resources 자원에 properties 파일을 만들어서 그걸 매핑함-->
    <a href="details.html" th:href="@{/order/details/{orderId}(orderId=${o.id})}">view</a>
<!-- new O() 이렇게 해야돌아가네 O.class는 안돌아감 -->
    <a href="details.html" th:href=" @{/hello(param1=${o.id}, param2=${o.id})}">view</a>
    <a href="details.html" th:href=" @{/hello/{param1}(param1=${o.id}, param2=${o.id})}">view</a>
    <a href="details.html" th:href=" @{/hello/{param1}(param1=${o.id}, param2=${value})}">view</a>
    <a href="details.html" th:href=" @{/hello/{param1}(param1=${o.id}, param2=${value},param3=${o.id})}">view</a>
<!-- {param1}을 하면 그 안으로 값이 들어감 만약 밖에 선언안해준 값이면 그 값들은 전부 &로 처리함-->
    <a href="details.html" th:href=" @{/hello/{param1}/{param5}(param1=${o.id}, param2=${value},param4=${o.id},param5=${value})}">vie212w</a>
<!-- {param1},{param5}같이 안에 정의해둔 코드들은 바로 뒤에 들어감 그 다음 ()로 안에 참조안해준것들만 ?의 뒤에 들어가서 &로 구분해서 값이 들어감
    
결과는 주석에 있는 내용과 같이 따로 앞에 사용이 안되어있다면 ?의 뒤로 들어가고
사용이 된다면 뒤에 ?로 안들어감 
그리고, ?의 뒤로 들어간 것끼리는 &구분자가 구분해서 보여줌
현재 https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#default-expressions-elvis-operator의 4.13버전의 방식대로 사용하면(타임리프&스프링부트 2.3.5 버전의
Gradle이고 가이드는 3.0.0임을 미리 알린다.. 버전이 업뎃되면서 생겼을 수도 있음.. 그렇지만, SNAPSHOT과 M1버전을 제외한 최신 버전은 위 버전이고, 따라서 정상적으로 사용하기에 문제가 있다)
   <!-- <span th:text="${o.id!=o.id} ?: _">ewrewrew</span> --> 
   템플릿 엔진은 위 사항을 알리고, Gradle에서 tymleaf버전만 바꾸려고 dependencies파일이랑 gradle에서 일부
   버전만 업데이트하는 걸 1시간 뒤져도 안 뜨고, 스택오버플로우 조차 관련 내용이 없길래.. 
   하는 수 없이, 기존에 있는 소스 코드를 계속 바꾸면서 동작하는 지 안하는 지 작동해보았다...
   기존 블로그들은 잘 작동하는데, 스냅샷이랑 M1버전을 썼거나, maven에서 타임리프 최신버전을 깔아서 잘 된게 아닌가 싶기도 하다..
   이걸 굳이 시간을 들여서 찾아본 이유는 단어장 돌리면서 계속 번역하며, 이해 안되는 문장은 통째로 번역 돌려가며 계속 보고 있었는데,
   유지보수 측면에서 재사용가능하고, 간결하게 쓰일 수 있다는 점이 마음에 들고, 과연 _만으로, 그걸 static에 있는 값과 비슷하게 잘 작동시킬 수 있나에 대한 의문이 들었기 떄문이다
   무슨 문제인지 잘 몰라서, 프로그래밍 관련 사이트에서 질문을 해보았을 때 버전 관련 문제에 대해 지적해주신분께 감사드려야 될 것 같다..
   정답은 ?: "거짓일 때 결과" 대신  ?'':거짓일 때 결과"로 수정하면 잘 작동한다
   no-operation이길래, "-"를 해야하나 " -"를 해야하나, "- "를 해야하나, "-"이거인지 "ㅡ"이거인지 .. 이런식으로 모든 상황에 대해 다 해보았는데도 잘 안되길래 마지막 수단으로 ''를
   하니 잘 되었다..
   사실 이 경우를 가장 먼저해야하지 않나 싶기도 한데, 
   <span th:text="${o.id} ?: 'no user authenticated'">...</span>
   라는 코드가 잘 작동하니, 당연히 위의 문제는 없겠다고 너무 당연하게 생각해서 오히려 더 해맨 감각도 있는 것 같긴하다..
   _ 즉, no-operation은 예를 들어
   <span th:text="${o.id!=o.id} ?'': _">ewrewrew</span>
   위와 같이 코드를 짜면, o.id!=o.id이면 삼항연산자처럼 ''를, 거짓이면 _(no-operation)을 작동시키는데, 이렇게 되면 기존의 static인 ewrewrew를 텍스트로 출력한다
   참인 조건에서 no-operation을 짜고 싶다면?
   <span th:text="${o.id!=o.id} ?_:'' ">ewrewrew</span>
   이렇게 짜면 된다
   이렇게 짜면 위에서도 간결성과 재사용성을 강조했는데 만약 이걸 기존 static 환경에서 진행했다면
   <span th:text="${o.id!=o.id} ?ewrewrew:'' ">ewrewrew</span>
   이렇게 짜야하고, 바꾸면 static값과 동적인 값을 두개 다 바꿔야한다.
   하지만, _(underbar, no-operation)를 이용하면 static값만 바꾸면 되서 훨씬 효과적이다
       <a href="http://localhost:8080/order/details/0" th:href="_">view</a>
    text뿐만 아니라 안된다는 내용은 안 보여서 이렇게 하이퍼링크같은 거의 모든 태그에 가능하지 않을까 싶다
    Configuration은 Conversion service로 구현되어있고, 현재 스프링 3과 스프링 4의 통합 패키지에서 투명하게 통합된 상태로(거의 비슷한 로직이라는 걸 말하는 것 같다..)
    ${{...}} and *{{...}} 표현자를 자동으로 쓸 수 있도록 해주는 것 같다.
   
