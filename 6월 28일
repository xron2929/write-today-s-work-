2과목 하려고 했는데 그냥 DB 깔끔하게 하던거 다 하는게 맞다고 판단해서 DB 연습중에 있다
일단 SELECT,UPDATE,CREATE,INSERT,정규식,REFERENCES 등 연습은 어느정도 끝난 것 같고
VIEW랑 ERP 다이어그램 공부하고 개념적 모델링 현실적 모델링 공부해야되는데 되게 빡센것 같다
DB 공격은 ''안에 데이터가 더해지니까
SELECT ''FROM ENROL;INSERT INTO ENROL VALUES(2,3,90,'Z'); SELECT ID '' FROM ENROL;
콤마 3개가 의문이 들었는데 MYSQL로 오류 뜨는거 맞고 콤마 4개로 이렇게 하면 쿼리에 공격이 가능하다
(당연하지만 여기서 악용한 새끼는 'FROM ENROL;INSERT INTO ENROL VALUES(2,3,90,'Z'); SELECT ID '를 삽입시켜서 위의 쿼리를 완성했다
UNION은 같은 쿼리에 대해서만 공격 가능하지만 콤마 이용하는 건 그 이상의 미친짓거리가 가능해서 이게 훨씬 더 위협적이다(전혀 상관없는 테이블도 이름만 안다면 공격이 가능하다)
소스가 보여지는 언어는 해커가 해당 언어에 잘 알고 있으면 더더욱 치명적일꺼라 생각한다
PREPARESTATEMENT도 암호화해도 이렇게 뚫릴 것 같은데 나중에 스프링할 때 한번 제대로 만져서 확인해봐야될 것 같다(이래서 DB에 들어오는 데이터도 암호화 해야되는데 
데이터 암호를 역이용해서 DB에 넣어버리면 그대로 쿼리가 돌아갈 위험이 있어서 쿼리 데이터에 '같은 특수문자를 포함하는지 확인도 해봐야되는 것 같다 이 경우 한번 더 암호화 해버리거나,
'같은 특수문자를 비허용하는 암호를 직접 찾거나 직접 짜야되는데 2번쨰는 찾기가 어려워서 직접 짜는 게 안전할 것 같긴하다 (한번 더 내부적으로 서버에서 암호화하는 경우는 node나 php같이 소스가 보여져서
해커가 해석할 여지가 있어 위협적이다. 특수문자를 허용안하는 db를 만드는건 보여져도 상관은 없겠지만.. )
이건 DB뿐만 아니라 네트워크 라이브러리 같은 것도 마찬가지로 위험이 있을 수도 있어서  그래서 예를 들어 사이트 ip 위치 검색이면 동적인건 숫자3개.숫자3개.숫자3개.숫자3개로 입력을 고정 시켜버리거나,
특수문자를 다 막는게 방법인 것 같다(최선인건 정적으로 자동으로 해결하되, 사용자의 입력에 따라 동적을 써야하는 경우는 최대한 제한)



