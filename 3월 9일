헷갈리는 패턴들을 바로 이해할 수 있도록 정리했다
템플릿 메소드 패턴: 부모 class에서 자식 class에 넘겨줄 때 꼭 필요한 메소드(템플릿 메소드, 즉 자식 class에 재정의하는 용도가 아니라 공통적으로 부모 class에 가져다 써야되는 것), 
자식 class에서 꼭 각각 구현해야될 class가 포함된 메소드(추상 메소드), 부모class에 있는 걸 그대로 써도 되고, 오버라이딩해서 확장 조금씩 해도 되는 메소드(훅 메소드)를 가져다 쓰는 패턴
https://western-sky.tistory.com/40
약간 
템플릿 메소드는 makeCoffe()처럼 자식 class에서 공통적으로 필요한 부모 class의 메소드
putSomething()처럼 자식이 꼭 확장해서 써야하는 훅 메소드
경우에 따라 조금씩 달라질 수도 있는 wrap()메소드 이런식으로 구분
딱히 메소드를 구분하지 않아도 코드가 상황에 따라 맞추면 되겠지만 그런 것 같다..
팩토리 메소드 패턴: 확장할 가능성이 높은 걸 추상 class로 두고 따로 구현체로 구현해서 확장이 필요하면 구현체만 변경해서 확장성 높이는 패턴
데코레이터 패턴: 값 계산 같은걸 객체를 동적으로 추가해주는 패턴...
https://velog.io/@hanna2100/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-3.-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%98%88%EC%A0%9C-decorator-pattern
위처럼 이런 저런 자료도 보긴했는데 위의 경우는 데코레이터를 이용해 우유 클래스,휘핑크림 클래스, 커피 클래스 이런식으로 두고 우유를 쓸 때마다 우유의 useMilk()가 사용되고,
(안의 매개변수 값으로 몇 ml 만큼 또는 몇 번 넣을지 정하는 것도 가능) 
그리고, Cost라는 class에 cost를 만들고, 하우스 블랜드 커피 같이 제품도 따로 class로 만들고,이 경우 기존 재료 값+ 남겨먹을 이윤으로 를 private int로 정하고, 우유의 hasMilk()로 있는 지 확인하고
useMilk()같은 메소드를 Cost에 추가하면서, 객체.cost()를 출력하게 하면 작성자가 원하는 확장성은 늘릴 수 있을 것 같다는 설계정도를 하였던 것 같다..(공부할 것이 많아 직접 하진 않았다..)
요즘 공부하면서 되게 까다롭다는 걸 많이 느끼는 것 같다..
new 객체() 이런식으로 하면 다른 객체에 대입되는데, 생성자를 이용해 생성자 값을 넘겨주나/ 넘겨주지않냐에 따라 나타나는 결과가 다르다..
또한 상속 관계가 아니어도 다른 class의 생성자에서 new로 만들어주거나, 함수에서 만들어줄 수도 있다는것도 충격이었던 것 같다..
약간 알고리즘 풀 때의 느낌을 디자인 패턴에서 느끼는 과정인 것 같다..
이번 달 목표는 디자인패턴 다 공부하는 것인데 중간 중간 해야될 것들도 많아서 잘 될지 모르겠다.

