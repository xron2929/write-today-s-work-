오늘 안에는 디자인 패턴 진도는 다 나갔고, 이제 도메인 주도 설계(DDD)방식이 먼지만 간단히 보고,
프론트 쪽 설계하는 걸 공부하면 이번 달은 끝날 것 같다..
그리고, effective java랑 읽고싶은 책 종류가 몇권 있긴한데 조금씩 정리해서 머 읽고싶은 지 분류하고 한번 쭉 읽어봐야겠다는 생각을 한 것 같다(cs쪽)
db 관련 공부하지 않아도 된다고 하는데, 막상 간략히 보니까 했던 것들에 비하면 어려운 건 아닌 것 같아서 저 쪽도 시간나면 건들여봐야겠다는 생각도 했고
알고리즘은 현업에서 하면 좋지 않을까 생각 중인데 그건 거기에 맞춰서 하는게 맞으니.. pass하겠다..
객체지향에 익숙해지려고 테트리스 짤까 생각도 했는데, 최근의 나는 점점 oop에 익숙해져가는 것 같아서 일정조율상 미뤄도 될 것 같다는 생각이 든 것 같다..
다른사람 프로젝트 보니까 티스토리 블로그도 코딩해서 짜던데, 나도 그런거 갖다쓰고 싶고, 웹 디자인 어떻게 공부할지 ui,ux,디자인 어떻게 할지 하고 싶은게 되게 많은데
시간이 없어서 못하고 있는게 억울할 뿐이다
계산기예제는 건들이고 싶은데, 하고싶은게 너무 많고, 지금 해야될 것도 많아서 못 건들이고있다.. 이제는 그 코드에 몇 마디 붙혀가며 잘 수정할 수 있을 것 같은데, 정작 할 시간이 없다..
빨리 빨리 디자인 패턴이나 나가야겠다..
그리고 vscode는 한 프로젝트를 만들고 거기서 폴더 만들어서 폴더끼리 분류하니까 패키지가 분리된다는 사실을 확인했다..
이제 vscode로 다중 패키지 실행법은 익힌 것 같다..
인텔리제이로도 미리 미리 익혀놔야겠다..
상태 패턴: 객체에 대한 상태의 타입을 이용한 패턴으로, 전략 패턴과의 차이는 전략패턴도 똑같이 어떠한 경우(무기 소유)에 따라 무기가 변경되거나
(위의 경우는 무기가 변경되면서 attack skill1 skill2 메소드가 오버라이딩되며, 활 기본쏘(몇초에 몇번 몇dmg)기 불화살(몇초에 몇번 몇dmg) 독화살(몇초에, 
약풍 중풍 강풍 이런식으로 구분할 수 있지만, 
상태 패턴은 스위치라는 class가 있다면 이 상태가 내부적으로 스위치 ON/OFF 같은 상태처럼 어떠한 조건 
되도록 하는 것 같다.
메멘토 패턴: 어떤 class에 있는 값을 setter나 등등 여러함수로 설정했을 때 그렇게 바뀌기 이전의 값을 기억하고 있는 패턴방식(스택으로 구현하던데, 상황에 따라서는 여기서 확장해서
스택으로 pop은 시키되, 한번에 여러개를 가리킬 경우도 존재할텐데 이 경우 dfs로 돌아가는 경우로 확장하는 것이 좋지 않을까 싶다..)
(A객체를 생성할 때 마다 위치를 나타내는 A객체의 위치갯수는 증가, A객체의 위치 갯수:N O(N^2) boolean canVisit[x][y]=true;(방문가능한지 x to y를 가능하게 설정.) (
분명 이 경우보다 나은 코드가 존재할껀데 기억이 안남..
반복문으로 구현한 것인데 dfs라고 하겠음..
ch(방문했는지 여부)는 위 경우 만들 때 잘 생성하면 되니 해도 좋은데 할 필요는 없다 1->2->1 이러면서 일부러 누가 꼬이게 만들겠는가? 근데 알고리즘이면 고려하긴 해야함)

이거랑 전체 수정기록을 기록하는 코드로 1번 파일 -> 2번 파일 -> 3번 파일,4번 파일
3번 파일->5번 파일 -> 4번 파일(수정)->6번 파일
6번 파일->1번 파일(수정)->2번 파일(수정)->1번 파일(수정)
(1번 파일의 사본은 수정하기전 과 수정한 후 2개임)
(또한 1번 파일은 나중에 가져올 때 두 개중 원하는 걸 reload해서 가져올 수 있음)
(기존의 기록으로 돌아가는 코드는 이미 위에서 스택으로 구현해준 상태이기 때문에 위 메소드만 추가해줌)

이 경우 구현하는 방법은 개인적으로 여러가지라고 생각하는데 단순히 log를 출력하는 용도면 동적으로 수정된 값을 배열,Arraylist에 넣어도 되긴함..)
(그 외에 머 여기서 1번 파일 수정했다는 사실을 은닉화할 수 있는게 있는데, 여기서 1번 파일을 은닉화해서 2번 파일->3번 파일... 2번파일->4번 파일... 이런식으로 보여주게 하고 싶다면(1번 파일이 2개임)
창의적이게 수정한 파일을 (지금까지 설정한 파일들+ 1번으로 잡아서, 해시테이블로 boolean 7번째 배열 = 1; 요런 느낌으로 짜면 될듯(작은 데이터로 가정해서 그냥 체이닝으로 했다고 가정..)  
(그래서 이걸 건드는 식으로..)
더 나은 방법이 있을 것 같은데 알고리즘 부족인지 잘 생각이 안난 것 같음..
위의 경우를 나중에 간단히 짜보긴 해야할듯
dfs+ 방문 노드 갯수 제한 + 방문 횟수 갯수 제한으로는 bad case가 많이 보여서 잘못된 코드였기에 위의 방법말곤 딱히 보이지 않았던듯..
플라이웨이트 패턴: 싱글톤이랑 비슷하게 하나의 인스턴스를 사용하는데, 싱글톤은 생성부에서 static으로 하나의 클래스에 하나의 인스턴스만 가능하게 하는 것이고,
플라이웨이트는 하나의 인스턴스를 이용하는데, 같은 class지만 여러개의 인스턴스를 호출할 수 있다
그리고 생각해보니 내 말중에 인스턴스랑 객체를 똑같이 남용하는 말실수가 있었는데, 좀 고쳐야겠다
객체: 클래스의 인스턴스(클래스에서 호출하는 인스턴스 변수)
인스턴스: 메인에서 실행하는 클래스의 구현 부분(함수,변수)
프록시 패턴: 클래스에서 처리 해주지 않고 프록시가 대신 중간에 처리해서 메소드만 객체를 가져와서 사용하는 패턴
커맨드 패턴:  추싱클래스,의 실행될 기능을 은닉화함으로써 기능을 다양하게 처리 가능하는 패턴으로 전략패턴은 갈아끼우는 느낌이면, 커맨드 패턴은 어떤 기능을 오버라이드 해서 순서대로 실행 시키는 느낌임










