
주문과 할인정책
회원은 상품을 주문할 수 있다
회원 등급에 따라 할인 정책을 적응 할 수 있다
할인정책은 모든 VIP는 1000원 할인해주는 고정금액할인 적용(나중 변경 가능)
할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책은 정하지 못했고
오픈 직전까지 미루고싶고, 할인을 적용하지 않을 수 있다

위의 경우 회원 데이터, 할인정책은 지금 결정하기 어려운 부분
그렇다고 이런 정책이 결정될 떄 까지 무기한 기다리긴 힘들어서
객체지향 설계 방법인 인터페이스를 미리만들고 구현체를 갈아끼울수 있도록 구현


회원 도메인 협력 관계
클라이언트 -> 회원서비스(회원가입,회원 조회 가능)-> 회원 저장소(인터페이스)
이걸 메모리 회원 저장소,DB 회원 저장소, 외부 시스템 연동 회원 저장소

일단 아직 아무것도 안 정해졌기 떄문에 아주 간단한 메모리 회원 저장소제작
서버를 껏다 키면 다 사라지기 떄문에 임시적으로만 하고, 나중에 갈아끼울것임

MemberService라는 인터페이스에
MemberServiceImpl이라는 구현체를 사용하고
이 구현체는 인터페이스인 MemberRepository를 참고한다
MemberRepository 인터페이스는 MemoryMemberRepository와
DbMemberRepository가 구현한다.
(임시적 사용 MemoryMember)(나중에 갈아끼울꺼 DbMemberRepository)
클라이언트 -> 회원 서비스 -> 메모리 회원 저장소

강사님께서 위와 같은 내용으로 코딩을 짜보겠다고 하셔서
내 나름대로 최대한 구현체의 의존성을 줄이고,
부모 class의 의존성을 최대한으로 늘린 결과이다
어떤 식으로 코드 짤지는 말씀 안해주시고 위와 같이 설명해주시길래
대충 느낌적으로 부분적인 요소는 채워나갔다
만약 반환타입이 있다면 Object타입이나 템플릿으로 짜고
인터페이스는 최대한 자유롭되
역할과 구현 중 역할에 해당되며,
최대한 수정될 일이 없고 구현체에서 수정되도록 말이다
interface는 final 타입이라 변수를 잡기 까다로워서

interface MemberService
{
    public void join_member();
    public void inquire_member();
}

class MemberServiceImpl implements MemberService
{
    public void join_member()
    {
        boolean isRegistered=false;
        if(isRegistered==true)
        {
            System.out.println("가입 성공");
        }
    }
    public void inquire_member()
    {
        MemberRepository repository=new MemoryMemberRepository();
        String search="java";
        for(int i=0;i<repository.members.length;i++)
        {
            if(repository.members[i]==search)
            {
                System.out.println("회원의 id는 "+i);
            }
            else
            {
                System.out.println("조회된 회원의 이름은 없습니다");
            }
        }
    }

}

abstract class MemberRepository
{
    static String[] members;
    public  MemberRepository()
    {
        this.members=MemoryMemberRepository.members;
    }
}

class MemoryMemberRepository extends MemberRepository
{
   
    public static String[] members=
    {
        "Sfsf"
    };

  
    
}

class DbMemberRepository extends MemberRepository
{

}

public class spring1 
{
    public static void main(String[] args)
    {
        MemberRepository a= new MemoryMemberRepository();
        System.out.println("?");
        System.out.println(a.members.length);
        MemberServiceImpl b= new MemberServiceImpl();
        b.inquire_member();
    }
}

최대한 부모의 종속성을 낮춘 코드(abstract)를 사용
아래의 경우에는 김영한 강사님께서 말씀해주신 interface를 최대한 사용해서
코드를 짰다.

interface MemberService
{
    public void join_member();
    public void inquire_member();
}

class MemberServiceImpl implements MemberService
{
    public void join_member()
    {
        boolean isRegistered=false;
        if(isRegistered==true)
        {
            System.out.println("가입 성공");
        }
    }
    public void inquire_member()
    {
        MemberRepository repository=new MemoryMemberRepository();
        String search="java";
        for(int i=0;i<repository.getLength();i++)
        {
            if(repository.getMember()[i]==search)
            {
                System.out.println("회원의 id는 "+i);
            }
            else
            {
                System.out.println("조회된 회원의 이름은 없습니다");
            }
        }
    }

}

interface MemberRepository
{
    public int getLength();
    public String[] getMember();
}

class MemoryMemberRepository implements MemberRepository
{
   
    public static String[] members=
    {
        "Sfsf"
    };
    public int getLength()
    {
        return members.length;
    }
    public String[] getMember()
    {
        return members;
    }
  
    
}

// class DbMemberRepository implements MemberRepository
// {
//     public static String[] members=
//     {
//         "Sfsf"
//     };
//     public int getLength()
//     {
//         return members.length;
//     }
//     public String[] getMember()
//     {
//         return members;
//     }
// }

public class spring1 
{
    public static void main(String[] args)
    {
        MemberRepository a= new MemoryMemberRepository();

        MemberServiceImpl b= new MemberServiceImpl();
        b.inquire_member();
    }
}


